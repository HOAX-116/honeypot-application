# =============================================================================
# Logstash Pipeline Configuration for Honeypot System
# File: config/logstash/pipeline/honeypot.conf
# =============================================================================

input {
  # Beats input for log collection
  beats {
    port => 5044
    host => "0.0.0.0"
  }
  
  # File input for honeypot logs
  file {
    path => "/var/log/honeypot/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    type => "honeypot"
  }
  
  # TCP input for real-time logs
  tcp {
    port => 5000
    codec => json_lines
    type => "honeypot_realtime"
  }
}

filter {
  # Parse timestamp
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }
  
  # Add GeoIP information using MaxMind
  if [source_ip] {
    geoip {
      source => "source_ip"
      target => "geoip"
      database => "/usr/share/logstash/geoip/GeoLite2-City.mmdb"
      add_field => {
        "geoip_country" => "%{[geoip][country_name]}"
        "geoip_city" => "%{[geoip][city_name]}"
        "geoip_continent" => "%{[geoip][continent_code]}"
        "geoip_latitude" => "%{[geoip][latitude]}"
        "geoip_longitude" => "%{[geoip][longitude]}"
      }
    }
    
    # Add ASN information
    geoip {
      source => "source_ip"
      target => "geoip_asn"
      database => "/usr/share/logstash/geoip/GeoLite2-ASN.mmdb"
      add_field => {
        "asn_number" => "%{[geoip_asn][asn]}"
        "asn_organization" => "%{[geoip_asn][as_org]}"
      }
    }
  }
  
  # Parse SSH honeypot logs
  if [service] == "ssh" {
    mutate {
      add_field => { "service_category" => "remote_access" }
      add_tag => [ "ssh_attack" ]
    }
    
    # Extract authentication attempts
    if [event_type] == "auth_attempt" {
      mutate {
        add_field => { "attack_type" => "brute_force" }
      }
      
      # Check for common credentials
      if [username] in ["admin", "root", "user", "guest", "administrator"] {
        mutate {
          add_tag => [ "common_username" ]
          add_field => { "threat_level" => "medium" }
        }
      }
      
      if [password] in ["password", "123456", "admin", "root", "guest"] {
        mutate {
          add_tag => [ "common_password" ]
          add_field => { "threat_level" => "medium" }
        }
      }
    }
  }
  
  # Parse HTTP honeypot logs
  if [service] == "http" {
    mutate {
      add_field => { "service_category" => "web_service" }
      add_tag => [ "http_attack" ]
    }
    
    # Detect common attack patterns
    if [request_uri] =~ /\.(php|asp|jsp|cgi)/ {
      mutate {
        add_tag => [ "script_injection" ]
        add_field => { "attack_type" => "web_exploit" }
      }
    }
    
    if [request_uri] =~ /(admin|wp-admin|phpmyadmin|login)/ {
      mutate {
        add_tag => [ "admin_access_attempt" ]
        add_field => { "attack_type" => "unauthorized_access" }
      }
    }
    
    if [user_agent] =~ /(bot|crawler|scanner|nikto|sqlmap)/ {
      mutate {
        add_tag => [ "automated_scan" ]
        add_field => { "attack_type" => "reconnaissance" }
      }
    }
    
    # Check for SQL injection patterns
    if [request_uri] =~ /(union|select|insert|update|delete|drop|create|alter)/i {
      mutate {
        add_tag => [ "sql_injection" ]
        add_field => { "attack_type" => "sql_injection" }
        add_field => { "threat_level" => "high" }
      }
    }
    
    # Check for XSS patterns
    if [request_uri] =~ /(<script|javascript:|onload=|onerror=)/i {
      mutate {
        add_tag => [ "xss_attempt" ]
        add_field => { "attack_type" => "xss" }
        add_field => { "threat_level" => "high" }
      }
    }
  }
  
  # Parse FTP honeypot logs
  if [service] == "ftp" {
    mutate {
      add_field => { "service_category" => "file_transfer" }
      add_tag => [ "ftp_attack" ]
    }
    
    if [event_type] == "login_attempt" {
      mutate {
        add_field => { "attack_type" => "brute_force" }
      }
    }
    
    if [event_type] == "file_access" {
      mutate {
        add_field => { "attack_type" => "data_exfiltration" }
      }
    }
  }
  
  # Parse Telnet honeypot logs
  if [service] == "telnet" {
    mutate {
      add_field => { "service_category" => "remote_access" }
      add_tag => [ "telnet_attack" ]
    }
    
    if [event_type] == "login_attempt" {
      mutate {
        add_field => { "attack_type" => "brute_force" }
      }
    }
    
    # Detect IoT botnet patterns
    if [username] in ["admin", "root", "support", "user"] and [password] in ["admin", "password", "123456", "support"] {
      mutate {
        add_tag => [ "iot_botnet" ]
        add_field => { "attack_type" => "iot_compromise" }
        add_field => { "threat_level" => "high" }
      }
    }
  }
  
  # Threat intelligence enrichment
  if [source_ip] {
    # Check against known malicious IPs (simplified - in production use threat feeds)
    if [source_ip] =~ /^(10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[0-1])\.)/  {
      mutate {
        add_tag => [ "private_ip" ]
        add_field => { "threat_level" => "low" }
      }
    } else {
      mutate {
        add_tag => [ "public_ip" ]
      }
    }
    
    # Add reputation scoring (simplified)
    ruby {
      code => "
        ip = event.get('source_ip')
        # Simple reputation scoring based on patterns
        score = 0
        score += 10 if event.get('tags') && event.get('tags').include?('brute_force')
        score += 20 if event.get('tags') && event.get('tags').include?('sql_injection')
        score += 15 if event.get('tags') && event.get('tags').include?('automated_scan')
        score += 25 if event.get('tags') && event.get('tags').include?('iot_botnet')
        
        if score >= 20
          event.set('reputation_score', score)
          event.set('threat_level', 'high')
        elsif score >= 10
          event.set('reputation_score', score)
          event.set('threat_level', 'medium')
        else
          event.set('reputation_score', score)
          event.set('threat_level', 'low')
        end
      "
    }
  }
  
  # Add session tracking
  if [source_ip] and [service] {
    fingerprint {
      source => ["source_ip", "service"]
      target => "session_id"
      method => "SHA256"
    }
  }
  
  # Add attack frequency calculation
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "honeypot-stats"
    query => "source_ip:%{source_ip}"
    fields => { "attack_count" => "previous_attacks" }
  }
  
  # Calculate attack frequency
  ruby {
    code => "
      previous = event.get('previous_attacks') || 0
      current_count = previous.to_i + 1
      event.set('attack_frequency', current_count)
      
      # Mark high-frequency attackers
      if current_count >= 100
        event.set('high_frequency_attacker', true)
        event.set('threat_level', 'critical')
      end
    "
  }
  
  # Clean up unnecessary fields
  mutate {
    remove_field => ["host", "agent", "ecs", "input", "log"]
  }
  
  # Add metadata
  mutate {
    add_field => {
      "honeypot_version" => "1.0.0"
      "processed_at" => "%{@timestamp}"
      "data_source" => "honeypot_system"
    }
  }
}

output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "honeypot-logs-%{+YYYY.MM.dd}"
    template_name => "honeypot-template"
    template => "/usr/share/logstash/templates/honeypot-template.json"
    template_overwrite => true
  }
  
  # Send high-priority alerts to separate index
  if [threat_level] == "high" or [threat_level] == "critical" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "honeypot-alerts-%{+YYYY.MM.dd}"
    }
  }
  
  # Debug output (disable in production)
  if [DEBUG_MODE] == "true" {
    stdout {
      codec => rubydebug
    }
  }
  
  # Send to file for backup
  file {
    path => "/var/log/honeypot/processed/%{service}-%{+YYYY-MM-dd}.log"
    codec => json_lines
  }
}